#include <SoftwareSerial.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x3F, 16, 2);

#define xPin A1
#define yPin A2
#define zPin A3

// Calibrated minimum and maximum Raw Ranges for each axis
// Use calibration.ino file to get these values

int xMin = 263;
int xMax = 393;

int yMin = 264;
int yMax = 395;

int zMin = 267;
int zMax = 297;

const int samples = 10;
//--------------------------------------------------------------

// Set the threshold value
int threshold = 3;

SoftwareSerial mySerial(2, 3);
SoftwareSerial espSerial(5, 6);
//--------------------------------------------------------------
// Take multiple samples to reduce noise

const int buzzerPin = 9;
int flag = 0;
bool isEarthquake;
String message = "Earthquake Alert!\r\n"
                   "Safety Guidelines:\r\n"
                   "1. Drop, Cover, and Hold On.\r\n"
                   "2. Stay Indoors and away from hazards.\r\n"
                   "3. Evacuate if necessary to open areas.\r\n"
                   "Listen to authorities for updates.\r\n"
                   "Emergency Contacts:\r\n"
                   "- Medical Emergency: 104\r\n"
                   "- Fire Department: 103\r\n";

void setup() {
  pinMode(buzzerPin,OUTPUT);
  digitalWrite(buzzerPin,LOW);
  lcd.begin(16, 2);
  lcd.init();
   lcd.backlight();
  lcd.begin(16, 2);
  lcdteam();
  Serial.begin(115200);
  mySerial.begin(115200);
  espSerial.begin(115200);
  Serial.println("Initializing...");
  delay(1000);
  mySerial.println("AT"); // Once the handshake test is successful, it will back to OK
  updateSerial();


}

void loop() {
   int xRaw = 0, yRaw = 0, zRaw = 0;
  unsigned long previousMillis = 0;
  const long interval = 1000;  // Interval in milliseconds
  
  if (millis() - previousMillis >= interval) {
    previousMillis = millis();
    
    for (int i = 0; i < samples; i++) {
      xRaw += analogRead(xPin);
      yRaw += analogRead(yPin);
      zRaw += analogRead(zPin);
    }
    xRaw /= samples;
    yRaw /= samples;
    zRaw /= samples;

    long xMilliG = map(xRaw, xMin, xMax, -1000, 1000);
    long yMilliG = map(yRaw, yMin, yMax, -1000, 1000);
    long zMilliG = map(zRaw, zMin, zMax, -1000, 1000);

    float x_g_value = xMilliG / 1000.0;
    float y_g_value = yMilliG / 1000.0;
    float z_g_value = zMilliG / 1000.0;

    String sensorData = String(x_g_value, 0) + "G\t" + String(y_g_value, 0) + "G\t" + String(z_g_value, 0) + "G";

    Serial.println(sensorData);
    espSerial.println(sensorData);

    isEarthquake = (abs(x_g_value) > threshold) || (abs(y_g_value) > threshold) || (abs(z_g_value) > threshold);

    delay(500);
  }// Adjust delay as needed
  // Check if any of the values exceed the threshold
  

  // If an earthquake is detected, trigger the GSM module function
  if (isEarthquake) {
    Serial.println("Earthquake Alert!");
    buzzer();
    lcdEarthquakeAlert();
    sendSms();
    
  }
}

void sendSms() {
  if (flag == 0) {
    // Send the SMS
    mySerial.println("AT+CMGF=1"); // Configuring TEXT mode
    updateSerial();
    mySerial.println("AT+CMGS=\"+9779814467960\""); //change ZZ with country code and xxxxxxxxxxx with phone number to sms
    updateSerial();
    mySerial.print(message);
    updateSerial();
    mySerial.write(26); // CTRL+Z to send the SMS
    updateSerial();
    flag = 1;
  }
}

void updateSerial() {
  delay(500);
  while (Serial.available()) {
    mySerial.write(Serial.read());
  }
  while (mySerial.available()) {
    Serial.write(mySerial.read());
  }
}

void buzzer() {
  digitalWrite(buzzerPin, HIGH);
 
}

void lcdteam() {
  lcd.clear();
  lcd.print("Earthquake alert and monitoring system /t QudraCrafters");
}


void lcdEarthquakeAlert() {
  lcd.clear();
  lcd.print("Earthquake Alert!");
  lcd.setCursor(0, 1);
  lcd.print("Take precautions!");
  delay(2000);
}